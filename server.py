#!/usr/bin/env python3
"""
Custom HTTP Server for Frontend
T·ª± ƒë·ªông chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ch·ªß v√† b·∫£o m·∫≠t c√°c file nh·∫°y c·∫£m
"""

import http.server
import socketserver
import os
import sys
from urllib.parse import urlparse

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Parse the URL
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        # Chuy·ªÉn h∆∞·ªõng root ƒë·∫øn main/
        if path == '/' or path == '':
            self.send_response(302)
            self.send_header('Location', '/main/')
            self.end_headers()
            return
            
        # Ch·∫∑n truy c·∫≠p c√°c file/th∆∞ m·ª•c nh·∫°y c·∫£m
        forbidden_paths = [
            '/.git', '/.env', '/README', '/.htaccess', 
            '/server.py', '/robots.txt'
        ]
        
        for forbidden in forbidden_paths:
            if path.startswith(forbidden):
                self.send_error(403, "Forbidden")
                return
                
        # Ch·∫∑n truy c·∫≠p file .md
        if path.endswith('.md'):
            self.send_error(403, "Forbidden")
            return
            
        # X·ª≠ l√Ω b√¨nh th∆∞·ªùng cho c√°c request kh√°c
        super().do_GET()
    
    def log_message(self, format, *args):
        # Custom log format
        print(f"[{self.log_date_time_string()}] {format % args}")

def run_server(port=8000):
    """Ch·∫°y server v·ªõi port ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"""
    try:
        with socketserver.TCPServer(("", port), CustomHTTPRequestHandler) as httpd:
            print(f"üöÄ Server ƒëang ch·∫°y t·∫°i: http://localhost:{port}")
            print(f"üåê Ho·∫∑c truy c·∫≠p: http://103.163.118.181:{port}")
            print(f"üìÅ Th∆∞ m·ª•c g·ªëc: {os.getcwd()}")
            print("üõë Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server")
            print("-" * 50)
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Server ƒë√£ ƒë∆∞·ª£c d·ª´ng!")
    except OSError as e:
        if e.errno == 98:  # Address already in use
            print(f"‚ùå Port {port} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Th·ª≠ port kh√°c:")
            print(f"   python3 server.py {port + 1}")
        else:
            print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    # L·∫•y port t·ª´ command line ho·∫∑c d√πng m·∫∑c ƒë·ªãnh 8000
    port = 8000
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("‚ùå Port ph·∫£i l√† s·ªë nguy√™n!")
            sys.exit(1)
    
    run_server(port)